" my_vimrc
" Ver.32
" ----------------------------------------------

" OSTYPE
" ----------------------------------------------
let OSTYPE = system('uname')

" Operation
" ----------------------------------------------
set wildmenu wildmode=list:longest		"On  list of complement result
set clipboard=unnamed,autoselect        "On  clipboard
set mouse=a							    "On  mouse
set scrolloff=5                         "Keep a view of rows of top/bottom
set sidescrolloff=16                    "Keep a view of columns of left/right
set t_vb=                               "Off sound
set novisualbell                        "Off sound
set nocompatible                        "Off vim-vi compatible
set whichwrap=b,s,h,l,<,>,[,],~         "On  allow cursor movement from a line-end to next line-begin, needed to be placed after nocompatible
set matchpairs& matchpairs+=<:>         "Add <> for match pairs

" Visual
" ----------------------------------------------
set notitle					    	    "Off 'Thanks for flying Vim'
" set showmatch						    "On  highlight (), conflict with VimShell
set ruler                               "On  ruler at the bottom to show the cursor location
set number						        "On  number
set showcmd						        "Show command at the bottom row
set laststatus=2                        "On  status line always
set statusline=%F%h%=%p                 "Contents of status line
"set list							    "On  invisible char
syntax enable						    "On  syntax highlight

" highlight Normal ctermbg=none ctermfg=black                                " Background color
" highlight StatusLine term=none cterm=none ctermfg=grey ctermbg=black
" highlight CursorLine term=none cterm=none ctermfg=none ctermbg=lightgray    " Cursor line color
"set cursorline                         "On  highlight cursor row
set nocursorline                        "Off highlight cursor row
autocmd InsertEnter,InsertLeave * set cursorline!       " On  cursor row highlight when insert mode
"set cursorcolumn                       "On  highlight cursor column

" Indent
" ----------------------------------------------
set autoindent						    "On Autoindent
set smartindent						    "
set tabstop=4						    "Tab = blank * 4
set expandtab						    "Tab = blank * 4
set shiftwidth=4					    "Tab = blank * 4
set softtabstop=4					    "Tab = blank * 4

" Search
" ----------------------------------------------
set incsearch					        "On  incremental search
set ignorecase					        "On  ignore the difference between large and small char
set smartcase                           "On  distinguish upper/lower case
set hlsearch                            "On  keyword search highlight
"set nohlsearch                         "Off keyword search highlight
set wrapscan                            "On  Back to the top when search reaches the end

" Bakup/Swap
" ----------------------------------------------
set nobackup
set noswapfile
" set autoread                            "On Reread when the file is updated outside
" set confirm                             "On Confirm when the file is not saved yet

" Wrap
" ----------------------------------------------
set nowrap
" autocmd BufRead,BufNewFile *.html set nowrap
" autocmd BufRead,BufNewFile *.js set nowrap
" autocmd BufRead,BufNewFile *.css set nowrap

" Encode
" ----------------------------------------------
" if has('unix')
    " set encoding=utf-8

    " set fileformat=unix
    " set fileformats=unix,dos,mac
    " set fileencoding=utf-8
    " set fileencodings=utf-8,iso-2022-jp,cp932,euc-jp
    " set termencoding=
" elseif has('win32')
"     set encoding=utf-8
"
"     set fileformat=dos
"     set fileformats=dos,unix,mac
"     set fileencoding=utf-8
"     set fileencodings=iso-2022-jp,utf-8,euc-jp,cp932
"     set termencoding=
" endif

" Keymap
" ----------------------------------------------
inoremap <silent> jj <ESC>

inoremap <C-j> <Down>   "insert-mode + Down
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>

nnoremap s <Nop>
nnoremap sc <C-w>c		"close window/tag
nnoremap sh <C-w>h
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sw <C-w>w
nnoremap s< <C-w><
nnoremap s> <C-w>>
nnoremap s+ <C-w>+
nnoremap s- <C-w>-
nnoremap <S-d> <C-f>	"scroll down
nnoremap <S-e> <C-b>	"scroll up
nnoremap sd <C-]>		"Tag jump, go to tag
nnoremap sf <C-w>}		"Tag jump, go to tag with preview window
nnoremap ss <C-t>		"Tag jump, back from tag

nnoremap n nzz			"n + centered
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

nmap <silent> <Esc><Esc> :nohlsearch<CR>	"Cancel highligh

" NeoBundle
" ----------------------------------------------
" set nocompatible
filetype off
filetype plugin indent off

set runtimepath+=~/.vim/bundle/neobundle.vim
call neobundle#begin(expand('~/.vim/bundle/'))
let g:neobundle_default_git_protocol='https'

NeoBundleFetch 'Shougo/neobundle.vim'
NeoBundle 'nathanaelkane/vim-indent-guides'
NeoBundle 'itchyny/lightline.vim'
NeoBundle 'vim-jp/vimdoc-ja'
NeoBundle 'tpope/vim-surround'
NeoBundle 'tyru/caw.vim.git'
NeoBundle 'scrooloose/syntastic'
NeoBundle 'bronson/vim-trailing-whitespace'
NeoBundle 'altercation/vim-colors-solarized'
NeoBundle 'rhysd/clever-f.vim'
"NeoBundle 'Shougo/vimshell'
"NeoBundle 'Shougo/vimproc'
NeoBundle 'gorodinskiy/vim-colorsque'
NeoBundle 'terryma/vim-expand-region'
NeoBundleLazy 'Shougo/unite.vim', {'autoload': {'commands':['Unite']}}
NeoBundleLazy 'scrooloose/nerdtree', {'autoload': {'commands':['NERDTree']}}
NeoBundleLazy 'davidhalter/jedi-vim', {'autoload': {'filetypes':['python']}}
NeoBundleLazy 'pangloss/vim-javascript', {'autoload': {'filetypes':['javascript']}}
NeoBundleLazy 'nachumk/systemverilog.vim', {'autoload': {'filetypes':['verilog']}}

call neobundle#end()

filetype plugin on
filetype plugin indent on

" Omnifunc
" ----------------------------------------------
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete     "Off due to conflict with jedi-vim
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Python
" ----------------------------------------------
" filetype plugin on
autocmd FileType python setl autoindent
autocmd FileType python setl smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd FileType python setl expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType python let g:pydiction_location = '~/.vim/bundle/pydiction/complete-dict'

" Javascript
" ----------------------------------------------

" Markdown
" ----------------------------------------------
autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
let g:markdown_fenced_languages = [
\  'css',
\  'erb=eruby',
\  'javascript',
\  'js=javascript',
\  'json=javascript',
\  'ruby',
\  'xml',
\  'zsh',
\  'scala',
\  'java',
\  'c',
\  'php'
\]

" Unite.vim
" ----------------------------------------------
let g:unite_enable_start_insert=0                                       "Start with insert-mode
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
nnoremap <silent> Uy :Unite history/yank<CR>
nnoremap <silent> Ub :Unite buffer<CR>
nnoremap <silent> Uf :UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> Ur :Unite -buffer-name=register register<CR>
nnoremap <silent> Um :Unite file_mru buffer<CR>
nnoremap <silent> Uc :Unite command<CR>
autocmd FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
autocmd FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

" vim-indent-guides
" ----------------------------------------------
colorscheme default
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=247
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=251
let g:indent_guides_color_change_percent = 30
let g:indent_guides_guide_size = 1

" Jedi
" ----------------------------------------------
let g:jedi#popup_on_dot=0
let g:jedi#force_py_version = 3

if has('python3')
    let g:jedi#force_py_version = 3
elseif has ('python')
    let g:jedi#force_py_version = 2
endif

" Lightline
" ----------------------------------------------
set laststatus=2
set showtabline=2
set noshowmode
let g:lightline = { 'colorscheme' : 'wombat',}

" Vimdoc-ja
" ----------------------------------------------
helptags ~/.vim/bundle/vimdoc-ja/doc
set helplang=ja,en

" caw.vim.git
" ----------------------------------------------
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)

" Syntastic
" ----------------------------------------------
let g:syntastic_python_checkers = ["flake8"]
let g:syntastic_python_flake8_args = '--ignore="E501"'

" vim-clors-solarized
" ----------------------------------------------
if OSTYPE == "Linux\n"
    colorscheme desert
elseif OSTYPE == "MSYS_NT-6.1\n"
    syntax enable
    set background=dark
    colorscheme solarized
elseif OSTYPE == "MSYS_NT-10.0\n"
    syntax enable
    set background=dark
    colorscheme solarized
endif

" VimShell
" ----------------------------------------------
let g:vimshell_prompt = "[".$USER."@".$HOSTNAME."]> "
let g:vimshell_secondary_prompt = "> "
let g:vimshell_user_prompt = '"(" . getcwd() . ") --- (" . $USER . "@" . hostname() . ")"'

nnoremap <silent> vs :VimShell<CR>
nnoremap <silent> vss :VimShellSendString<CR>
nnoremap <silent> vip :VimShellInteractive ipython<CR>

" vim-expand-region
" ----------------------------------------------
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

