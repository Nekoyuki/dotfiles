scriptencoding utf-8
" vim:set ts=8 sts=2 sw=2 tw=0: (この行に関しては:help modelineを参照)
"
" An example for a Japanese version vimrc file.
" 日本語版のデフォルト設定ファイル(vimrc) - Vim 8.1
"
" Last Change: 27-Apr-2020.
" Maintainer:  MURAOKA Taro <koron.kaoriya@gmail.com>
"
" 解説:
" このファイルにはVimの起動時に必ず設定される、編集時の挙動に関する設定が書
" かれています。GUIに関する設定はgvimrcに書かかれています。
"
" 個人用設定は_vimrcというファイルを作成しそこで行ないます。_vimrcはこのファ
" イルの後に読込まれるため、ここに書かれた内容を上書きして設定することが出来
" ます。_vimrcは$HOMEまたは$VIMに置いておく必要があります。$HOMEは$VIMよりも
" 優先され、$HOMEでみつかった場合$VIMは読込まれません。
"
" 管理者向けに本設定ファイルを直接書き換えずに済ませることを目的として、サイ
" トローカルな設定を別ファイルで行なえるように配慮してあります。Vim起動時に
" サイトローカルな設定ファイル($VIM/vimrc_local.vim)が存在するならば、本設定
" ファイルの主要部分が読み込まれる前に自動的に読み込みます。
"
" 読み込み後、変数g:vimrc_local_finishが非0の値に設定されていた場合には本設
" 定ファイルに書かれた内容は一切実行されません。デフォルト動作を全て差し替え
" たい場合に利用して下さい。
"
" 参考:
"   :help vimrc
"   :echo $HOME
"   :echo $VIM
"   :version

"---------------------------------------------------------------------------
" サイトローカルな設定($VIM/vimrc_local.vim)があれば読み込む。読み込んだ後に
" 変数g:vimrc_local_finishに非0な値が設定されていた場合には、それ以上の設定
" ファイルの読込を中止する。
if 1 && filereadable($VIM . '/vimrc_local.vim')
  unlet! g:vimrc_local_finish
  source $VIM/vimrc_local.vim
  if exists('g:vimrc_local_finish') && g:vimrc_local_finish != 0
    finish
  endif
endif

"---------------------------------------------------------------------------
" ユーザ優先設定($HOME/.vimrc_first.vim)があれば読み込む。読み込んだ後に変数
" g:vimrc_first_finishに非0な値が設定されていた場合には、それ以上の設定ファ
" イルの読込を中止する。
if 1 && exists('$HOME') && filereadable($HOME . '/.vimrc_first.vim')
  unlet! g:vimrc_first_finish
  source $HOME/.vimrc_first.vim
  if exists('g:vimrc_first_finish') && g:vimrc_first_finish != 0
    finish
  endif
endif

" plugins下のディレクトリをruntimepathへ追加する。
for s:path in split(glob($VIM.'/plugins/*'), '\n')
  if s:path !~# '\~$' && isdirectory(s:path)
    let &runtimepath = &runtimepath.','.s:path
  end
endfor
unlet s:path

"---------------------------------------------------------------------------
" 日本語対応のための設定:
"
" ファイルを読込む時にトライする文字エンコードの順序を確定する。漢字コード自
" 動判別機能を利用する場合には別途iconv.dllが必要。iconv.dllについては
" README_w32j.txtを参照。ユーティリティスクリプトを読み込むことで設定される。
source $VIM/plugins/kaoriya/encode_japan.vim
" メッセージを日本語にする (Windowsでは自動的に判断・設定されている)
if !(has('win32') || has('mac')) && has('multi_lang')
  if !exists('$LANG') || $LANG.'X' ==# 'X'
    if !exists('$LC_CTYPE') || $LC_CTYPE.'X' ==# 'X'
      language ctype ja_JP.eucJP
    endif
    if !exists('$LC_MESSAGES') || $LC_MESSAGES.'X' ==# 'X'
      language messages ja_JP.eucJP
    endif
  endif
endif
" MacOS Xメニューの日本語化 (メニュー表示前に行なう必要がある)
if has('mac')
  set langmenu=japanese
endif
" 日本語入力用のkeymapの設定例 (コメントアウト)
if has('keymap')
  " ローマ字仮名のkeymap
  "silent! set keymap=japanese
  "set iminsert=0 imsearch=0
endif
" 非GUI日本語コンソールを使っている場合の設定
if !has('gui_running') && &encoding != 'cp932' && &term == 'win32'
  set termencoding=cp932
endif

"---------------------------------------------------------------------------
" メニューファイルが存在しない場合は予め'guioptions'を調整しておく
if 1 && !filereadable($VIMRUNTIME . '/menu.vim') && has('gui_running')
  set guioptions+=M
endif

"---------------------------------------------------------------------------
" Bram氏の提供する設定例をインクルード (別ファイル:vimrc_example.vim)。これ
" 以前にg:no_vimrc_exampleに非0な値を設定しておけばインクルードはしない。
if 1 && (!exists('g:no_vimrc_example') || g:no_vimrc_example == 0)
  if &guioptions !~# "M"
    " vimrc_example.vimを読み込む時はguioptionsにMフラグをつけて、syntax on
    " やfiletype plugin onが引き起こすmenu.vimの読み込みを避ける。こうしない
    " とencに対応するメニューファイルが読み込まれてしまい、これの後で読み込
    " まれる.vimrcでencが設定された場合にその設定が反映されずメニューが文字
    " 化けてしまう。
    set guioptions+=M
    source $VIMRUNTIME/vimrc_example.vim
    set guioptions-=M
  else
    source $VIMRUNTIME/vimrc_example.vim
  endif
endif

"---------------------------------------------------------------------------
" 検索の挙動に関する設定:
"
" 検索時に大文字小文字を無視 (noignorecase:無視しない)
set ignorecase
" 大文字小文字の両方が含まれている場合は大文字小文字を区別
set smartcase

"---------------------------------------------------------------------------
" 編集に関する設定:
"
" タブの画面上での幅
set tabstop=8
" タブをスペースに展開しない (expandtab:展開する)
set noexpandtab
" 自動的にインデントする (noautoindent:インデントしない)
set autoindent
" バックスペースでインデントや改行を削除できるようにする
set backspace=indent,eol,start
" 検索時にファイルの最後まで行ったら最初に戻る (nowrapscan:戻らない)
set wrapscan
" 括弧入力時に対応する括弧を表示 (noshowmatch:表示しない)
set showmatch
" コマンドライン補完するときに強化されたものを使う(参照 :help wildmenu)
set wildmenu
" テキスト挿入中の自動折り返しを日本語に対応させる
set formatoptions+=mM

"---------------------------------------------------------------------------
" GUI固有ではない画面表示の設定:
"
" 行番号を非表示 (number:表示)
set nonumber
" ルーラーを表示 (noruler:非表示)
set ruler
" タブや改行を非表示 (list:表示)
set nolist
" どの文字でタブや改行を表示するかを設定
"set listchars=tab:>-,extends:<,trail:-,eol:<
" 長い行を折り返して表示 (nowrap:折り返さない)
set wrap
" 常にステータス行を表示 (詳細は:he laststatus)
set laststatus=2
" コマンドラインの高さ (Windows用gvim使用時はgvimrcを編集すること)
set cmdheight=2
" コマンドをステータス行に表示
set showcmd
" タイトルを表示
set title
" 画面を黒地に白にする (次行の先頭の " を削除すれば有効になる)
"colorscheme evening " (Windows用gvim使用時はgvimrcを編集すること)

"---------------------------------------------------------------------------
" ファイル操作に関する設定:
"
" バックアップファイルを作成しない (次行の先頭の " を削除すれば有効になる)
"set nobackup


"---------------------------------------------------------------------------
" ファイル名に大文字小文字の区別がないシステム用の設定:
"   (例: DOS/Windows/MacOS)
"
if filereadable($VIM . '/vimrc') && filereadable($VIM . '/ViMrC')
  " tagsファイルの重複防止
  set tags=./tags,tags
endif

"---------------------------------------------------------------------------
" コンソールでのカラー表示のための設定(暫定的にUNIX専用)
if has('unix') && !has('gui_running')
  let s:uname = system('uname')
  if s:uname =~? "linux"
    " no need to use builtin_term for Linux
  elseif s:uname =~? "freebsd"
    set term=builtin_cons25
  elseif s:uname =~? "Darwin"
    set term=builtin_beos-ansi
  else
    set term=builtin_xterm
  endif
  unlet s:uname
endif

"---------------------------------------------------------------------------
" コンソール版で環境変数$DISPLAYが設定されていると起動が遅くなる件へ対応
if !has('gui_running') && has('xterm_clipboard')
  set clipboard=exclude:cons\\\|linux\\\|cygwin\\\|rxvt\\\|screen
endif

"---------------------------------------------------------------------------
" プラットホーム依存の特別な設定

" WinではPATHに$VIMが含まれていないときにexeを見つけ出せないので修正
if has('win32') && $PATH !~? '\(^\|;\)' . escape($VIM, '\\') . '\(;\|$\)'
  let $PATH = $VIM . ';' . $PATH
endif

if has('mac')
  " Macではデフォルトの'iskeyword'がcp932に対応しきれていないので修正
  set iskeyword=@,48-57,_,128-167,224-235
endif

"---------------------------------------------------------------------------
" KaoriYaでバンドルしているプラグインのための設定

" autofmt: 日本語文章のフォーマット(折り返し)プラグイン.
set formatexpr=autofmt#japanese#formatexpr()

" vimdoc-ja: 日本語ヘルプを無効化する.
if kaoriya#switch#enabled('disable-vimdoc-ja')
  let &rtp = join(filter(split(&rtp, ','), 'v:val !~ "[/\\\\]plugins[/\\\\]vimdoc-ja"'), ',')
endif

" vimproc: 同梱のvimprocを無効化する
if kaoriya#switch#enabled('disable-vimproc')
  let &rtp = join(filter(split(&rtp, ','), 'v:val !~ "[/\\\\]plugins[/\\\\]vimproc$"'), ',')
endif

" go-extra: 同梱の vim-go-extra を無効化する
if kaoriya#switch#enabled('disable-go-extra')
  let &rtp = join(filter(split(&rtp, ','), 'v:val !~ "[/\\\\]plugins[/\\\\]golang$"'), ',')
endif

" Copyright (C) 2009-2018 KaoriYa/MURAOKA Taro
"---------------------------------------------------------------------------

" Ver.32
" ----------------------------------------------

" OSTYPE
" ----------------------------------------------
" let OSTYPE = system('uname')

" Operation
" ----------------------------------------------
set wildmenu wildmode=list:longest		"On  list of complement result
set clipboard=unnamed,autoselect        "On  clipboard
set mouse=a							    "On  mouse
set scrolloff=5                         "Keep a view of rows of top/bottom
set sidescrolloff=16                    "Keep a view of columns of left/right
set t_vb=                               "Off sound
set novisualbell                        "Off sound
set nocompatible                        "Off vim-vi compatible
set whichwrap=b,s,h,l,<,>,[,],~         "On  allow cursor movement from a line-end to next line-begin, needed to be placed after nocompatible
set matchpairs& matchpairs+=<:>         "Add <> for match pairs

" Visual
" ----------------------------------------------
set notitle					    	    "Off 'Thanks for flying Vim'
" set showmatch						    "On  highlight (), conflict with VimShell
set ruler                               "On  ruler at the bottom to show the cursor location
set number						        "On  number
set showcmd						        "Show command at the bottom row
set laststatus=2                        "On  status line always
set statusline=%F%h%=%p                 "Contents of status line
"set list							    "On  invisible char
syntax enable						    "On  syntax highlight

" highlight Normal ctermbg=none ctermfg=black                                " Background color
" highlight StatusLine term=none cterm=none ctermfg=grey ctermbg=black
" highlight CursorLine term=none cterm=none ctermfg=none ctermbg=lightgray    " Cursor line color
"set cursorline                         "On  highlight cursor row
set nocursorline                        "Off highlight cursor row
autocmd InsertEnter,InsertLeave * set cursorline!       " On  cursor row highlight when insert mode
"set cursorcolumn                       "On  highlight cursor column

" Indent
" ----------------------------------------------
set autoindent						    "On Autoindent
set smartindent						    "
set tabstop=4						    "Tab = blank * 4
set expandtab						    "Tab = blank * 4
set shiftwidth=4					    "Tab = blank * 4
set softtabstop=4					    "Tab = blank * 4

" Search
" ----------------------------------------------
set incsearch					        "On  incremental search
set ignorecase					        "On  ignore the difference between large and small char
set smartcase                           "On  distinguish upper/lower case
set hlsearch                            "On  keyword search highlight
"set nohlsearch                         "Off keyword search highlight
set wrapscan                            "On  Back to the top when search reaches the end

" Bakup/Swap
" ----------------------------------------------
set nobackup
set noswapfile
" set autoread                            "On Reread when the file is updated outside
" set confirm                             "On Confirm when the file is not saved yet

" Wrap
" ----------------------------------------------
set nowrap
" autocmd BufRead,BufNewFile *.html set nowrap
" autocmd BufRead,BufNewFile *.js set nowrap
" autocmd BufRead,BufNewFile *.css set nowrap

" Encode
" ----------------------------------------------
" if has('unix')
    " set encoding=utf-8

    " set fileformat=unix
    " set fileformats=unix,dos,mac
    " set fileencoding=utf-8
    " set fileencodings=utf-8,iso-2022-jp,cp932,euc-jp
    " set termencoding=
" elseif has('win32')
"     set encoding=utf-8
"
"     set fileformat=dos
"     set fileformats=dos,unix,mac
"     set fileencoding=utf-8
"     set fileencodings=iso-2022-jp,utf-8,euc-jp,cp932
"     set termencoding=
" endif

" Keymap
" ----------------------------------------------
inoremap <silent> jj <ESC>

inoremap <C-j> <Down>   "insert-mode + Down
inoremap <C-k> <Up>
inoremap <C-h> <Left>
inoremap <C-l> <Right>

nnoremap s <Nop>
nnoremap sc <C-w>c		"close window/tag
nnoremap sh <C-w>h
nnoremap sj <C-w>j
nnoremap sk <C-w>k
nnoremap sl <C-w>l
nnoremap sw <C-w>w
nnoremap s< <C-w><
nnoremap s> <C-w>>
nnoremap s+ <C-w>+
nnoremap s- <C-w>-
nnoremap <S-d> <C-f>	"scroll down
nnoremap <S-e> <C-b>	"scroll up
nnoremap sd <C-]>		"Tag jump, go to tag
nnoremap sf <C-w>}		"Tag jump, go to tag with preview window
nnoremap ss <C-t>		"Tag jump, back from tag

nnoremap n nzz			"n + centered
nnoremap N Nzz
nnoremap * *zz
nnoremap # #zz
nnoremap g* g*zz
nnoremap g# g#zz

nmap <silent> <Esc><Esc> :nohlsearch<CR>	"Cancel highligh

" " NeoBundle
" " ----------------------------------------------
" " set nocompatible
" filetype off
" filetype plugin indent off
" 
" set runtimepath+=~/.vim/bundle/neobundle.vim
" call neobundle#begin(expand('~/.vim/bundle/'))
" let g:neobundle_default_git_protocol='https'
" 
" NeoBundleFetch 'Shougo/neobundle.vim'
" NeoBundle 'nathanaelkane/vim-indent-guides'
" NeoBundle 'itchyny/lightline.vim'
" NeoBundle 'vim-jp/vimdoc-ja'
" NeoBundle 'tpope/vim-surround'
" NeoBundle 'tyru/caw.vim.git'
" NeoBundle 'scrooloose/syntastic'
" NeoBundle 'bronson/vim-trailing-whitespace'
" NeoBundle 'altercation/vim-colors-solarized'
" NeoBundle 'rhysd/clever-f.vim'
" "NeoBundle 'Shougo/vimshell'
" "NeoBundle 'Shougo/vimproc'
" NeoBundle 'gorodinskiy/vim-colorsque'
" NeoBundle 'terryma/vim-expand-region'
" NeoBundleLazy 'Shougo/unite.vim', {'autoload': {'commands':['Unite']}}
" NeoBundleLazy 'scrooloose/nerdtree', {'autoload': {'commands':['NERDTree']}}
" NeoBundleLazy 'davidhalter/jedi-vim', {'autoload': {'filetypes':['python']}}
" NeoBundleLazy 'pangloss/vim-javascript', {'autoload': {'filetypes':['javascript']}}
" NeoBundleLazy 'nachumk/systemverilog.vim', {'autoload': {'filetypes':['verilog']}}
" 
" call neobundle#end()
" 
" filetype plugin on
" filetype plugin indent on

" Omnifunc
" ----------------------------------------------
autocmd FileType css setlocal omnifunc=csscomplete#CompleteCSS
autocmd FileType html,markdown setlocal omnifunc=htmlcomplete#CompleteTags
autocmd FileType javascript setlocal omnifunc=javascriptcomplete#CompleteJS
" autocmd FileType python setlocal omnifunc=pythoncomplete#Complete     "Off due to conflict with jedi-vim
autocmd FileType xml setlocal omnifunc=xmlcomplete#CompleteTags

" Python
" ----------------------------------------------
" filetype plugin on
autocmd FileType python setl autoindent
autocmd FileType python setl smartindent cinwords=if,elif,else,for,while,try,except,finally,def,class
autocmd FileType python setl expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd FileType python let g:pydiction_location = '~/.vim/bundle/pydiction/complete-dict'

" Javascript
" ----------------------------------------------

" Markdown
" ----------------------------------------------
autocmd BufNewFile,BufRead *.{md,mdwn,mkd,mkdn,mark*} set filetype=markdown
let g:markdown_fenced_languages = [
\  'css',
\  'erb=eruby',
\  'javascript',
\  'js=javascript',
\  'json=javascript',
\  'ruby',
\  'xml',
\  'zsh',
\  'scala',
\  'java',
\  'c',
\  'php'
\]

" Unite.vim
" ----------------------------------------------
let g:unite_enable_start_insert=0                                       "Start with insert-mode
let g:unite_source_history_yank_enable =1
let g:unite_source_file_mru_limit = 200
nnoremap <silent> Uy :Unite history/yank<CR>
nnoremap <silent> Ub :Unite buffer<CR>
nnoremap <silent> Uf :UniteWithBufferDir -buffer-name=files file<CR>
nnoremap <silent> Ur :Unite -buffer-name=register register<CR>
nnoremap <silent> Um :Unite file_mru buffer<CR>
nnoremap <silent> Uc :Unite command<CR>
nnoremap <silent> Un :NERDTreeToggle<CR>
nnoremap <silent> Up :PrevimOpen<CR>
autocmd FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
autocmd FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>

" vim-indent-guides
" ----------------------------------------------
colorscheme default
let g:indent_guides_enable_on_vim_startup=1
let g:indent_guides_start_level=2
let g:indent_guides_auto_colors=0
autocmd VimEnter,Colorscheme * :hi IndentGuidesOdd  ctermbg=247
autocmd VimEnter,Colorscheme * :hi IndentGuidesEven ctermbg=251
let g:indent_guides_color_change_percent = 30
let g:indent_guides_guide_size = 1

" " Jedi
" " ----------------------------------------------
" let g:jedi#popup_on_dot=0
" let g:jedi#force_py_version = 3
" 
" if has('python3')
"     let g:jedi#force_py_version = 3
" elseif has ('python')
"     let g:jedi#force_py_version = 2
" endif
" 
" Lightline
" ----------------------------------------------
set laststatus=2
set showtabline=2
set noshowmode
let g:lightline = { 'colorscheme' : 'wombat',}

" " Vimdoc-ja
" " ----------------------------------------------
" helptags ~/.vim/bundle/vimdoc-ja/doc
" set helplang=ja,en

" caw.vim.git
" ----------------------------------------------
nmap <Leader>c <Plug>(caw:hatpos:toggle)
vmap <Leader>c <Plug>(caw:hatpos:toggle)

" " Syntastic
" " ----------------------------------------------
" let g:syntastic_python_checkers = ["flake8"]
" let g:syntastic_python_flake8_args = '--ignore="E501"'
" 
" " vim-clors-solarized
" " ----------------------------------------------
" if OSTYPE == "Linux\n"
"     colorscheme desert
" elseif OSTYPE == "MSYS_NT-6.1\n"
"     syntax enable
"     set background=dark
"     colorscheme solarized
" elseif OSTYPE == "MSYS_NT-10.0\n"
"     syntax enable
"     set background=dark
"     colorscheme solarized
" endif
" 
" " VimShell
" " ----------------------------------------------
" let g:vimshell_prompt = "[".$USER."@".$HOSTNAME."]> "
" let g:vimshell_secondary_prompt = "> "
" let g:vimshell_user_prompt = '"(" . getcwd() . ") --- (" . $USER . "@" . hostname() . ")"'
" 
" nnoremap <silent> vs :VimShell<CR>
" nnoremap <silent> vss :VimShellSendString<CR>
" nnoremap <silent> vip :VimShellInteractive ipython<CR>

" vim-expand-region
" ----------------------------------------------
vmap v <Plug>(expand_region_expand)
vmap <C-v> <Plug>(expand_region_shrink)

" previm
" ----------------------------------------------
let g:previm_open_cmd = 'C:\\Program\ Files\ (x86)\\Google\\Chrome\\Application\\chrome.exe'
