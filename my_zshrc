# my_zshrc
# Version 52
#**************************************
#
# PATH
#**************************************
if [ -e "$HOME/local/bin" ]; then
    export PATH="$HOME/local/bin:"$PATH
fi

# LANG
#**************************************
export EDITOR=vim

case ${OSTYPE} in
    linux*)
        if [ -e "${HOME}/local/bin/zsh" ]; then
            export SHELL=${HOME}/local/bin/zsh
        fi

        export LANG="en_US.UTF-8"
        export LC_CTYPE="en_US.UTF-8"
        export LC_NUMERIC="en_US.UTF-8"
        export LC_TIME="en_US.UTF-8"
        export LC_COLLATE="en_US.UTF-8"
        export LC_MONETARY="en_US.UTF-8"
        export LC_MESSAGES="en_US.UTF-8"
        export LC_PAPER="en_US.UTF-8"
        export LC_NAME="en_US.UTF-8"
        export LC_ADDRESS="en_US.UTF-8"
        export LC_TELEPHONE="en_US.UTF-8"
        export LC_MEASUREMENT="en_US.UTF-8"
        export LC_IDENTIFICATION="en_US.UTF-8"
        ;;
    msys*)
        export SHELL=/usr/bin/zsh

        case ${CONTITLE} in
            MSys2_UTF-8)
                export LANG="ja_JP.UTF-8"
                export OUTPUT_CHARSET=utf8
                ;;
            MSys2_SJIS)
                export LANG="ja_JP.SJIS"
                export OUTPUT_CHARSET=sjis
                ;;
        esac

        export BROWSER="C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
        ;;
esac

# color enabled
#**************************************
export TERM=xterm-256color
autoload -Uz colors
colors

# keybinds
#**************************************
bindkey -v
# bindkey -e

# keybinds by b4b4r07
#**************************************
. ~/dotfiles/zsh-vimode-visual.zsh

# keybinds
#**************************************
# Easy to escape
bindkey -M viins 'jj'  vi-cmd-mode
# has_keymap "vivis" && bindkey -M vivis 'jj' vi-visual-exit

# Merge emacs mode to viins mode
bindkey -M viins '\er' history-incremental-pattern-search-forward
bindkey -M viins '^?'  backward-delete-char
bindkey -M viins '^A'  beginning-of-line
bindkey -M viins '^B'  backward-char
bindkey -M viins '^D'  delete-char-or-list
bindkey -M viins '^E'  end-of-line
bindkey -M viins '^F'  forward-char
bindkey -M viins '^G'  send-break
bindkey -M viins '^H'  backward-delete-char
bindkey -M viins '^K'  kill-line
bindkey -M viins '^N'  down-line-or-history
bindkey -M viins '^P'  up-line-or-history
bindkey -M viins '^R'  history-incremental-pattern-search-backward
bindkey -M viins '^U'  backward-kill-line
bindkey -M viins '^W'  backward-kill-word
bindkey -M viins '^Y'  yank

# Make more vim-like behaviors
# bindkey -M vicmd 'gg' beginning-of-line
# bindkey -M vicmd 'G'  end-of-line

# prompt
#**************************************
autoload -Uz colors; colors
autoload -Uz terminfo

case ${LANG} in
    *.UTF-8)
        S_LEFT_BOLD=""
        S_LEFT_THIN=""
        S_RIGHT_BOLD=""
        S_RIGHT_THIN=""
        ;;
    *.SJIS)
        S_LEFT_BOLD=" "
        S_LEFT_THIN=" "
        S_RIGHT_BOLD=" "
        S_RIGHT_THIN=" "
        ;;
esac

local COLOR_FG=$'%F{030}'
local COLOR_BG=$'%K{030}'
local COLOR_RESET=$'%k%f'
# local COLOR_FG=$'\e[38;5;030m'
# local COLOR_BG=$'\e[30;48;5;030m'
# local COLOR_RESET=$'\e[0m'

local HISTORY_NAME="%K{002}%F{008} %h ${S_RIGHT_THIN} %n %K{008}%F{002}${S_RIGHT_BOLD}${COLOR_RESET}"

case ${HOSTNAME} in
    r*)
        local HOSTCOLOR="%K{132}%F{008}${S_RIGHT_BOLD} ${HOSTNAME} %K{008}%F{132}${S_RIGHT_BOLD}"
        ;;
    g*)
        local HOSTCOLOR="%K{105}%F{008}${S_RIGHT_BOLD} ${HOSTNAME} %K{008}%F{105}${S_RIGHT_BOLD}"
        ;;
    N*)
        local HOSTCOLOR="%K{245}%F{008}${S_RIGHT_BOLD} ${HOSTNAME} %K{008}%F{245}${S_RIGHT_BOLD}"
        ;;
    h*)
        local HOSTCOLOR="%K{245}%F{008}${S_RIGHT_BOLD} ${HOSTNAME} %K{008}%F{245}${S_RIGHT_BOLD}"
        ;;
esac

case ${LANG} in
    ja_JP.UTF-8)
        local PROMPT_LANG="%K{245}%F{008}${S_RIGHT_BOLD} ${LANG} %K{008}%F{245}${S_RIGHT_BOLD}"
        ;;
    ja_JP.SJIS)
        local PROMPT_LANG="%K{132}%F{008}${S_RIGHT_BOLD} ${LANG} %K{008}%F{132}${S_RIGHT_BOLD}"
        ;;
    en_US.UTF-8)
        local PROMPT_LANG="%K{002}%F{008}${S_RIGHT_BOLD} ${LANG} %K{008}%F{002}${S_RIGHT_BOLD}"
        ;;
esac
# local PROMPT_LANG=${LANG_COLOR}${LANG}${COLOR_RESET}

local TTY_COLOR="%K{245}%F{008}${S_RIGHT_BOLD} %l %K{008}%F{245}${S_RIGHT_BOLD}"
local DIR_COLOR="%K{245}%F{008}${S_RIGHT_BOLD} %~ %K{008}%F{245}${S_RIGHT_BOLD}"

if [ -v BASHRC_GOOGLE_PATH ]; then
    local MY_PROMPT="%{${COLOR_BG}%} %h%{${COLOR_RESET}%} %n > %l > %{${PROMPT_LANG}%} > %~ >%{${COLOR_RESET}%}"
else
    local MY_PROMPT="${HISTORY_NAME}${HOSTCOLOR}${TTY_COLOR}${PROMPT_LANG}${DIR_COLOR}${COLOR_RESET}"
fi

precmd () {
    print -rP "$MY_PROMPT"
}

PROMPT2="%_%%"
SPROMT="${fg[red]}>>${reset_color}"


terminfo_down_sc=$terminfo[cud1]$terminfo[cuu1]$terminfo[sc]$terminfo[cud1]

function zle-line-init zle-keymap-select {
    case ${KEYMAP} in
        main|viins)
            # PROMPT_2="%K{002}%F{008} INSERT %K{008}%F{002}${S_RIGHT_BOLD}$reset_color"
            PROMPT_2="$fg[cyan]-- INSERT --$reset_color"
            ;;
        vicmd)
            # PROMPT_2="%K{245}%F{008} NORMAL %K{008}%F{245}${S_RIGHT_BOLD}$reset_color"
            PROMPT_2="$fg[white]-- NORMAL --$reset_color"
            ;;
        vivis|vivli)
            # PROMPT_2="%K{013}%F{008} VISUAL %K{008}%F{013}${S_RIGHT_BOLD}$reset_color"
            PROMPT_2="$fg[yellow]-- VISUAL --$reset_color"
            ;;
    esac

    PS1="%{$terminfo_down_sc$PROMPT_2$terminfo[rc]%}% %{$CONDA_DEFAULT_ENV%} + "
    zle reset-prompt
}

preexec () { print -rn -- $terminfo[el]; }

zle -N zle-line-init
zle -N zle-keymap-select

# completion
#**************************************
autoload -U compinit
compinit -u
zstyle ':completion:*:default' menu select=2
export LS_COLORS='di=34:ln=36:so=32:pi=33:ex=32:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# history
#**************************************
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt hist_ignore_dups
# setopt share_history
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt auto_pushd
setopt pushd_ignore_dups
# autoload history-search-end
# zle -N history-beginning-search-backward-end history-search-end
# zle -N history-beginning-search-forward-end history-search-end
# bindkey '^p' history-begining-search-backward-end
# bindkey '^n' history-begining-search-forward-end

# predict
#**************************************
# autoload predict-on
# predict-on

# cd
#**************************************
setopt auto_cd
# function chpwd() { ls }

# remove
#**************************************
# setopt rm_star_wait

# word
#**************************************
autoload -Uz select-word-style
select-word-style default
zstyle ':zle:*' word-chars " _/=.;@*{},|"
zstyle ':zle:*' word-style unspecified

# options
#**************************************
setopt correct
setopt interactive_comments
setopt ignore_eof
setopt no_beep
setopt print_eight_bit
setopt noautoremoveslash
setopt magic_equal_subst
setopt noclobber

# functions
#**************************************
function hg(){ (head -1 $1 ; tail -n +2 $1 | grep $2) }

function settitle ()
{
    t="`hostname` [$@]"
    # "\e]2;" > control code to start changing the window title
    # "\007"  > control code to end
    echo -ne "\e]2;$t\007"
}

# function cd()
# {
#   builtin cd $@ && settitle `pwd` && ls
# }

function chpwd() {
  settitle `pwd` && ls --color=tty --show-control-chars -F
}

function ic()
{
	iconv -f SJIS -t UTF-8 $1 -o $1_ic_$$
	mv $1_ic_$$ $1
}

function wincmd()
{
    CMD=$1
    shift
    $CMD $* 2>&1 | iconv -f CP932 -t UTF-8
}

function anaconda()
{
    case ${OSTYPE} in
        linux*)
            ;;
        msys*)
            if [ -e "/c/Anaconda3/python" ]; then
                export PATH='/c/Anaconda3:/c/Anaconda3/Scripts:'$PATH
                export PYTHONPATH='/c/Anaconda3/Lib/site-packages'

                alias py='winpty python'
                alias jp='winpty jupyter console'
                alias jq='winpty jupyter qtconsole'
                alias jn='winpty jupyter notebook'
                alias ip='winpty ipython --profile default --pylab=auto'
            fi
            ;;
    esac
}

# alias
#**************************************
case ${OSTYPE} in
    linux*)
        alias ip='ipython --profile default'
        alias iq='ipython qtconsole --profile default --pylab=inline'
        alias tmux='LD_LIBRARY_PATH=$HOME/local/lib tmux'
        ;;
    msys*)
        # alias jp='winpty jupyter console'
        # alias jq='jupyter qtconsole'
        # alias jn='jupyter notebook'
        # alias ip='winpty ipython --profile default --pylab=auto'
        ;;
esac

case ${LANG} in
    ja_JP.UTF-8)
        alias ipconfig='wincmd ipconfig'
        alias netstat='wincmd netstat'
        alias netsh='wincmd netsh'
        alias ping='wincmd /c/Windows/System32/ping'
        alias tracert='wincmd TRACERT'
        ;;
    ja_JP.SJIS)
        ;;
esac

alias v='vim'
alias vi='vim'

alias ls='ls --color=tty --show-control-chars -F'
alias la='ls -a'
alias ll='ls -al'
alias l='ls'

alias a='/c/Users/$USER/AppData/Local/atom/bin/atom.cmd'
alias c='clear'
alias d='diff'
alias g='grep --color -i'
alias h='history'
alias m='more'
alias p='pwd'

# alias ..='cd ..'
alias cr='chrome'
alias df='df -h'
alias du='du -h'
alias he='head'
alias le='less -N'
alias pa='ps -a'
alias py='python'
alias rm='rm -i'
alias so='source'
alias ta='tail'
alias tm='tmux'

alias csvc='csvcut'
alias csvl='csvlook'
alias csvg='csvgrep'

# global alias
#**************************************
alias -g C='| csvlook'
# alias -g F='| fzy'
alias -g G='| grep --color -i'
alias -g H='| head'
alias -g L='| less'
alias -g M='| more'
# alias -g P='| peco'
alias -g S='| sed'
alias -g T='| tail'

# Python
#**************************************
# case ${OSTYPE} in
#     linux*)
#         ;;
#     msys*)
#         if [ -e "/c/Anaconda3/python" ]; then
#             export PATH='/c/Anaconda3:/c/Anaconda3/Scripts:'$PATH
#             export PYTHONPATH='/c/Anaconda3/Lib/site-packages'
#         fi
#         ;;
# esac

# Go
#**************************************
case ${OSTYPE} in
    linux*)
        ;;
    msys*)
        if [ -e "/c/Go/bin/go" ]; then
            export GOPATH=/c/Go
            export PATH='/c/Go/bin:'$PATH
        fi
        ;;
esac

# peco/fzy
#**************************************
if [ -x "`which fzy`" ]; then
    local PECO="fzy"
    local PECO_OPT="-l 20"

    function peco-select-history() {
        BUFFER=$(history -n 1 | LC_ALL=C sort -k1,1nr | awk '!a[$0]++' | $PECO $PECO_OPT --query "$LBUFFER")
        CURSOR=$#BUFFER
        # zle clear-screen
    }

    autoload -Uz is-at-least
    if is-at-least 4.3.11
    then
        autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
        add-zsh-hook chpwd chpwd_recent_dirs
        zstyle ':chpwd:*' recent-dirs-max 5000
        zstyle ':chpwd:*' recent-dirs-default yes
        zstyle ':completion:*' recent-dirs-insert both
    fi
    zle -N peco-select-history

    function peco-select-history-number() {
        BUFFER=$(history -100 | sort -k1,1nr | $PECO $PECO_OPT | cut -b 8-)
        CURSOR=$#BUFFER
        # zle clear-screen
    }
    zle -N peco-select-history-number

    function peco-cdr () {
        local selected_dir=$(cdr -l | awk '{ print $2 }' | awk '!a[$0]++' | $PECO $PECO_OPT)
        if [ -n "$selected_dir" ]; then
            BUFFER="cd ${selected_dir}"
            zle accept-line
        fi
        # zle clear-screen
    }
    zle -N peco-cdr

    function peco-kill-process () {
        ps -ef | $PECO $PECO_OPT | awk '{ print $2 }' | xargs kill
        # zle clear-screen
    }
    zle -N peco-kill-process

    function peco-find () {
        BUFFER=$(find . | $PECO $PECO_OPT)
        CURSOR=$#BUFFER
        # zle clear-screen
    }
    zle -N peco-find

    # function peco-find-vim () {
    #     find . | $PECO $PECO_OPT | xargs sh -c 'vim "$0" < /dev/tty'
    #     # zle clear-screen
    # }
    # zle -N peco-find-vim

    alias -g F='| fzy -l 20'
    # alias -g P='| peco'
    alias tp='top | fzy'
    alias pp='ps aux | fzy'

    bindkey '^r' peco-select-history
    bindkey '^h' peco-select-history-number
    bindkey '^l' peco-cdr
    bindkey '^xk' peco-kill-process
    bindkey '^v' peco-find
    # bindkey '^v' peco-find-vim
fi

# ATOM
#**************************************
# case ${OSTYPE} in
#     linux*)
#         ;;
#     msys*)
#         if [ -e "/c/Users/$USER/AppData/Local/atom/bin" ]; then
#             export PATH="/c/Users/$USER/AppData/Local/atom/bin:"$PATH
#         fi
#         ;;
# esac

# Chrome
#**************************************
case ${OSTYPE} in
    linux*)
        ;;
    msys*)
        if [ -e "/c/\Program Files (x86)/Google/Chrome/Application" ]; then
            export PATH="/c/\Program Files (x86)/Google/Chrome/Application:"$PATH
        fi
        ;;
esac

# zplug
#**************************************
if [ -e "${HOME}/.zplug" ]; then
    source ~/.zplug/init.zsh
    # source ~/.zplug/zplug

    zplug "zsh-users/zsh-syntax-highlighting"
    # zplug "hchbaw/opp.zsh"
    # zplug "b4b4r07/zsh-vimode-visual"
    # zplug "Valodim/zsh-prompt-powerline"
    # zplug "themes/agnoster", from:oh-my-zsh

    # zplug load --verbose
fi

