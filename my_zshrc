# my_zshrc
# Version 2
#**************************************
export LANG=ja_jp.UTF-8
export EDITOR=vim

case ${OSTYPE} in
    linux*)
        export SHELL=${HOME}/local/bin/zsh
        ;;
    msys*)
        export SHELL=/usr/bin/zsh
        export BROWSER="C:\Program Files (x86)\Google\Chrome\Application\chrome.exe"
        ;;
esac

# color enabled
#**************************************
export TERM=xterm-256color
autoload -Uz colors
colors

# prompt
#**************************************
PROMPT="%{${fg[blue]}%}[%h:%n@%m:%c]>%{${reset_color}%}"
PROMPT2="%_%%"
SPROMT="${fg[red]}>>${reset_color}"

# completion
#**************************************
autoload -U compinit
compinit -u
zstyle ':completion:*:default' menu select=2
export LS_COLORS='di=34:ln=36:so=32:pi=33:ex=32:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30'
zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS}

# history
#**************************************
HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000
setopt hist_ignore_dups
setopt share_history
setopt hist_ignore_space
setopt hist_reduce_blanks
setopt auto_pushd
setopt pushd_ignore_dups

# predict
#**************************************
# autoload predict-on
# predict-on

# remove
#**************************************
setopt rm_star_wait

# word
#**************************************
autoload -Uz select-word-style
select-word-style default
zstyle ':zle:*' word-chars " _/=.;@*{},|"
zstyle ':zle:*' word-style unspecified

# options
#**************************************
setopt correct
setopt interactive_comments
setopt ignore_eof
setopt no_beep
setopt print_eight_bit
setopt noautoremoveslash
setopt magic_equal_subst

# keybinds
#**************************************
case ${OSTYPE} in
    linux*)
        ;;
    msys*)
        bindkey '^A' beginning-of-line
        bindkey '^B' backward-char
        bindkey '^E' end-of-line
        bindkey '^F' forward-char
        bindkey '^K' kill-line
        bindkey '^N' down-line-or-history
        bindkey '^P' up-line-or-history
        ;;
esac

# alias
#**************************************
case ${OSTYPE} in
    linux*)
        # alias ls='ls --color=tty -F'
        ;;
    msys*)
        # alias ls='ls --color=auto --show-control-chars -F'
        alias jq='jupyter qtconsole'
        alias jn='jupyter notebook'
        ;;
esac

alias v='vim'
alias vi='vim'

alias ls='ls --color=tty -F'
alias la='ls -a'
alias ll='ls -al'
alias l='ls'

alias c='clear'
alias d='diff'
alias g='grep --color -i'
alias h='history'
alias m='more'
alias p='pwd'

alias rm='rm -i'
alias ..='cd ..'
alias he='head'
alias ta='tail'
alias le='less'
alias pa='ps -a'

alias ip='ipython --profile default'
alias iq='ipython qtconsole --profile default --pylab=inline'

# global alias
#**************************************
alias -g G='| grep --color -i'
alias -g H='| head'
alias -g L='| less'
alias -g M='| more'
# alias -g P='| peco'
alias -g S='| sed'
alias -g T='| tail'

# functions
#**************************************
function hg(){ (head -1 $1 ; tail -n +2 $1 | grep $2) }

function settitle ()
{
    t="`hostname` [$@]"
    # "\e]2;" > control code to start changing the window title
    # "\007"  > control code to end
    echo -ne "\e]2;$t\007"
}

function cd()
{
  builtin cd $@ && settitle `pwd` && ls
}

function ic()
{
	iconv -f SJIS -t UTF-8 $1 -o $1_ic_$$
	mv $1_ic_$$ $1
}

# peco
#**************************************
if [ -x "`which peco`" ]; then
    alias -g P='| peco'
    # alias ll='ls -la | peco'
    alias tp='top | peco'
    alias pp='ps aux | peco'

    function peco-select-history() {
        local tac
        if which tac > /dev/null; then
            tac="tac"
        else
            tac="tail -r"
        fi
        BUFFER=$(history -n 1 | eval $tac | awk '!a[$0]++' | peco --query "$LBUFFER")
        CURSOR=$#BUFFER
        zle clear-screen
    }

    autoload -Uz is-at-least
    if is-at-least 4.3.11
    then
        autoload -Uz chpwd_recent_dirs cdr add-zsh-hook
        add-zsh-hook chpwd chpwd_recent_dirs
        zstyle ':chpwd:*' recent-dirs-max 5000
        zstyle ':chpwd:*' recent-dirs-default yes
        zstyle ':completion:*' recent-dirs-insert both
    fi
    zle -N peco-select-history
    bindkey '^r' peco-select-history

    function peco-cdr () {
        local selected_dir=$(cdr -l | awk '{ print $2 }' | peco)
        if [ -n "$selected_dir" ]; then
            BUFFER="cd ${selected_dir}"
            zle accept-line
        fi
        zle clear-screen
    }
    zle -N peco-cdr
    bindkey '^l' peco-cdr

    function peco-kill-process () {
        ps -ef | peco | awk '{ print $2 }' | xargs kill
        zle clear-screen
    }
    zle -N peco-kill-process
    bindkey '^xk' peco-kill-process
fi

# zplug
#**************************************
if [ -e "${HOME}/.zplug" ]; then
    source ~/.zplug/zplug

    # zplug "zsh-users/zsh-syntax-highlighting"

    # zplug "Valodim/zsh-prompt-powerline"
    # zplug "themes/agnoster", from:oh-my-zsh
    # zplug "themes/avit", from:oh-my-zsh

    zplug load --verbose
fi
