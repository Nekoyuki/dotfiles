# my_tmux.conf
# Version 07, for v2.9
#**************************************

# $Id: vim-keys.conf,v 1.2 2010-09-18 09:36:15 nicm Exp $
#
# vim-keys.conf, v1.2 2010/09/12
#
# By Daniel Thau.  Public domain.
#
# This configuration file binds many vi- and vim-like bindings to the
# appropriate tmux key bindings.  Note that for many key bindings there is no
# tmux analogue.  This is intended for tmux 1.3, which handles pane selection
# differently from the previous versions

# split windows like vim
# vim's definition of a horizontal/vertical split is reversed from tmux's
bind s split-window -v
bind v split-window -h

# move around panes with hjkl, as one would in vim after pressing ctrl-w
bind h select-pane -L
bind j select-pane -D
bind k select-pane -U
bind l select-pane -R

# resize panes like vim
# feel free to change the "1" to however many lines you want to resize by, only
# one at a time can be slow
bind < resize-pane -L 1
bind > resize-pane -R 1
bind - resize-pane -D 1
bind + resize-pane -U 1

# bind : to command-prompt like vim
# this is the default in tmux already
bind : command-prompt

# vi-style controls for copy mode
setw -g mode-keys vi

# My config -----

# C-b > C-j
set -g prefix C-j
unbind C-b

# Escape
set -s escape-time 0
# set -s repeat-time 0

# Copy/Paste
bind v copy-mode
# bind Space copy-mode
bind p paste-buffer
bind -T copy-mode-vi v send-keys -X begin-selection
bind -T copy-mode-vi V send-keys -X select-line
bind -T copy-mode-vi C-v send-keys -X rectangle-toggle
bind -T copy-mode-vi y send-keys -X copy-selection
# for v2.3
# bind -t vi-copy v begin-selection
# bind -t vi-copy V select-line
# bind -t vi-copy C-v rectangle-toggle
# bind -t vi-copy y copy-selection

if-shell 'test "$(uname -s | cut -c1-4)" = "MSYS"' 'bind -T copy-mode-vi y send-keys -X copy-pipe "cat > /dev/clipboard"'
if-shell 'test "$(uname -s | cut -c1-4)" = "MSYS"' 'bind ] run "cat /dev/clipboard | tmux load-buffer - && tmux paste-buffer"'
if-shell 'which xsel' 'bind -T copy-mode-vi y send-keys -X copy-pipe "xsel -ib"'
# for v2.3
# if-shell 'test "$(uname -s | cut -c1-4)" = "MSYS"' 'bind -t vi-copy y copy-pipe "cat > /dev/clipboard"'
# if-shell 'test "$(uname -s | cut -c1-4)" = "MSYS"' 'bind ] run "cat /dev/clipboard | tmux load-buffer - && tmux paste-buffer"'
# if-shell 'which xsel' 'bind -t vi-copy y copy-pipe "xsel -ib"'
# # bind -t vi-copy y copy-pipe "cat > /dev/clipboard"

# Mouse
set-option -g mouse on

## zsh
# set-option -g default-shell /usr/bin/zsh

# highlight pane for v2.9
set -g pane-border-style fg=green
set -g pane-border-style bg=black
set -g pane-active-border-style fg=green
set -g pane-active-border-style bg=yellow

# highlight pane for v2.4
# set -g pane-border-fg green
# set -g pane-border-bg black
# set -g pane-active-border-fg green
# set -g pane-active-border-bg yellow

# Status bar
# set -g status-fg "colour255"
# set -g status-bg "colour238"
# set -g status-left-length 40
# set -g status-right-length 40
# set -g status-left "#{?client_prefix,#[fg=colour255]#[bg=colour200],#[fg=colour255]#[bg=colour33]} MODE #[fg=colour255,bg=colour241] #H S<#S> P<#P> #[default] "
# set -g status-right "#[fg=colour255,bg=colour241][%Y-%m-%d  %a  %H:%M]#[default]"
# setw -g window-status-current-format "#[fg=colour255,bg=colour5] #I:#W#F #[default]"

# My powerline
S_LEFT_BOLD=""
S_LEFT_THIN=""
S_RIGHT_BOLD=""
S_RIGHT_THIN=""
# S_LEFT_BOLD="<"
# S_LEFT_THIN="<"
# S_RIGHT_BOLD=">"
# S_RIGHT_THIN=">"
set-option -g status on
set-option -g status-interval 1
set-option -g status-left-length 60
set-option -g status-right-length 90
set -g status-left "#{?client_prefix,#[fg=colour232]#[bg=colour170],#[fg=colour232]#[bg=colour245]} + #{?client_prefix,#[fg=colour170]#[bg=colour240],#[fg=colour245]#[bg=colour240]}${S_RIGHT_BOLD}#[fg=colour245,bg=colour240] #H #[default]${S_RIGHT_BOLD}"
set -g status-right "#[fg=colour240,bg=colour235]${S_LEFT_BOLD}#[fg=colour245,bg=colour240] %a ${S_LEFT_THIN} %Y-%m-%d ${S_LEFT_THIN} %H:%M #[default]"
set-window-option -g window-status-format "#[fg=colour235, bg=colour240]${S_RIGHT_BOLD}#[fg=colour245, bg=colour240] #I.#P ${S_RIGHT_THIN} #W #[fg=colour240, bg=colour235]${S_RIGHT_BOLD}"
set-window-option -g window-status-current-format "#[fg=colour235, bg=colour170]${S_RIGHT_BOLD}#[fg=colour255, bg=colour170] #I.#P ${S_RIGHT_THIN} #W #[fg=colour170, bg=colour235]${S_RIGHT_BOLD}"
# set -g status-left "#{?client_prefix,#[fg=colour232]#[bg=colour170],#[fg=colour232]#[bg=colour245]} + #{?client_prefix,#[fg=colour170]#[bg=colour240],#[fg=colour245]#[bg=colour240]}#[fg=colour245,bg=colour240] #H #[default]${S_RIGHT_BOLD}"
# set -g status-right "#[fg=colour240,bg=colour235]#[fg=colour245,bg=colour240] %a ${S_LEFT_THIN} %Y-%m-%d ${S_LEFT_THIN} %H:%M #[default]"
# set-window-option -g window-status-format "#[fg=colour235, bg=colour240]#[fg=colour245, bg=colour240] #I.#P ${S_RIGHT_THIN} #W #[fg=colour240, bg=colour235]"
# set-window-option -g window-status-current-format "#[fg=colour235, bg=colour170]#[fg=colour255, bg=colour170] #I.#P ${S_RIGHT_THIN} #W #[fg=colour170, bg=colour235]"
set -g status-fg colour240
set -g status-bg colour235
